library(AlphaSimR)
library(readxl)
library(writexl)
library(rrBLUP)


library(caret)
library(ranger)
library(tidyverse)
library(e1071)
library(randomForest)

genMap <- readRDS("genMap.Rdata")
haplotypes <- readRDS("srAlphaHaplo.Rdata")

founderPop = newMapPop(genMap, 
                       haplotypes, 
                       inbred = FALSE, 
                       ploidy = 2L)

SP <- SimParam$new(founderPop)
SP$addTraitA(10, mean=1350)
SP$setVarE(h2=0.2)

Parents = newPop(founderPop)
F1 = randCross(Parents, 200) ##randomly cross 100 parents##

## self and bulk F1 to form F2 ##

F2 = self(F1, nProgeny = 5)##nProgeny = number of progeny per cross## 
F2 = setPheno(F2)

F3Sel = selectFam(F2, 100, use="pheno", top=TRUE) 
F3 = self(F3Sel)
F3 = setPheno(F3)

##select top families from F3 to form F4 ##

F4Sel = selectFam(F3, 60, use="pheno", top=TRUE) 
F4 = self(F4Sel)
F4 = setPheno(F4)

## select top families from F4 to form F5 ##

F5Sel = selectFam(F4, 30, use="pheno", top=TRUE)
F5 = self(F5Sel)
F5 = setPheno(F5)

PYTSel = selectFam(F5, 16, use="pheno", top=TRUE) 
PYT = self(PYTSel, nProgeny = 2)
PYT = setPheno(PYT, reps=2)

TP = self(PYT, nProgeny = 4)

TrainingGeno <- pullSegSiteGeno(TP)
TrainingPheno <- pheno(TP)

####BUILD GS PREDICTION MODEL ###

#source GS Prediction Model
source("RF_Random.R")

M = as.data.frame(pullSegSiteGeno(PYT))
colnames(M) <- paste("ID",2:(ncol(M)+1),sep="")
PYTebv <- as.numeric(predict(rf_fit, M))
PYT@ebv <- as.matrix(PYTebv)

newParents = selectInd(PYT, 10, use="ebv", top=TRUE)

F1 = randCross(newParents, 100) ##randomly cross 0 parents##

## self and bulk F1 to form F2 ##

F2 = self(F1, nProgeny = 5) ##nProgeny = number of progeny per cross## 

##set EBV using BLUP model##
M_F2 <-as.data.frame(pullSegSiteGeno(F2))
G_F2 = M_F2-1

colnames(G_F2) <- paste("ID",2:(ncol(G_F2)+1),sep="")
EBVF2 <- as.numeric(predict(rf_fit, G_F2))

F2@ebv <- as.matrix(EBVF2)

cor1 = cor(gv(F2), ebv(F2))

## select top families to form F3 ##

F3Sel = selectFam(F2, 45, use="ebv", top=TRUE) 
F3 = self(F3Sel)

##set EBV using BLUP model##
M_F3 <-as.data.frame(pullSegSiteGeno(F3))
G_F3 = M_F3-1

colnames(G_F3) <- paste("ID",2:(ncol(G_F3)+1),sep="")
EBVF3 <-as.numeric(predict(rf_fit, G_F3))

F3@ebv <- as.matrix(EBVF3)

cor2 = cor(gv(F3),ebv(F3))

##select top families from F3 to form F4 ##

F4Sel= selectFam(F3, 30, use="ebv") 
F4 = self(F4Sel)


##set EBV using BLUP model##
M_F4 <-as.data.frame(pullSegSiteGeno(F4))
G_F4 = M_F4-1

colnames(G_F4) <- paste("ID",2:(ncol(G_F4)+1),sep="")
EBVF4 <-as.numeric(predict(rf_fit, G_F4))

F4@ebv <- as.matrix(EBVF4)

cor3= cor(gv(F4), ebv(F4))

## select top families from F4 to form F5 ##

F5Sel = selectFam(F4, 15, use="ebv")
F5 = self(F5Sel)

##set EBV using BLUP model##
M_F5 <-as.data.frame(pullSegSiteGeno(F5))
G_F5 = M_F5-1

colnames(G_F5) <- paste("ID",2:(ncol(G_F5)+1),sep="")
EBVF5 <- as.numeric(predict(rf_fit, G_F5))

F5@ebv <- as.matrix(EBVF5)

cor4 = cor(gv(F5),ebv(F5))

## select top individual from F5 to form preliminary yield trial ##

PYTSel = selectWithinFam(F5, 4, use="ebv") 
PYT = self(PYTSel)

##set EBV using BLUP model##
M_PYT <-as.data.frame(pullSegSiteGeno(PYT))
G_PYT = M_PYT-1

colnames(G_PYT) <- paste("ID",2:(ncol(G_PYT)+1),sep="")
EBVPYT <- as.numeric(predict(rf_fit, G_PYT))

PYT@ebv <- as.matrix(EBVPYT)
cor5 = cor(gv(PYT),ebv(PYT))

## select top plants from PYT to form advanced yield trial ##

AYTSel = selectInd(PYT,  20, use="ebv", reps=5, top=TRUE) 
AYT = self(AYTSel)

##set EBV using BLUP model##
M_AYT <-as.data.frame(pullSegSiteGeno(AYT))
G_AYT = M_AYT-1

colnames(G_AYT) <- paste("ID",2:(ncol(G_AYT)+1),sep="")
EBVAYT <- as.numeric(predict(rf_fit, G_AYT))

AYT@ebv <- as.matrix(EBVAYT)

cor6 = cor(gv(AYT),ebv(AYT))

## select top plants to form variety ##
VarietySel = selectInd(AYT, 1, use="ebv")
Variety = self(VarietySel)

## pull genetic value for each generation and write results ##


F1gv = mean(gv(F1))
F2gv = mean(gv(F2))
F3gv = mean(gv(F3))
F4gv = mean(gv(F4))
F5gv = mean(gv(F5))
PYTgv = mean(gv(PYT))
AYTgv = mean(gv(AYT))
Varietygv = mean(gv(Variety))


###list correlations to view model performacne ##
corMat <- matrix(nrow=6, ncol=1)
corMat[1,] <- cor1
corMat[2,] <- cor2
corMat[3,] <- cor3
corMat[4,] <- cor4
corMat[5,] <- cor5
corMat[6,] <- cor6

## write files - naming convention: "model_trainingSet_descriptor_populationType_trait.csv" ###

F1gv <- mean(gv(F1))
F2gv <- mean(gv(F2))
F3gv <- mean(gv(F3))
F4gv <- mean(gv(F4))
F5gv <- mean(gv(F5))
PYTgv <- mean(gv(PYT))
AYTgv <- mean(gv(AYT))
Varietygv <- mean(gv(Variety))

###list correlations to view model performacne ##
corMat <- matrix(nrow=6, ncol=1)
corMat[1,] <- cor1
corMat[2,] <- cor2
corMat[3,] <- cor3
corMat[4,] <- cor4
corMat[5,] <- cor5
corMat[6,] <- cor6

## write files - naming convention: "model_trainingSet_descriptor_populationType_trait.csv" ###
