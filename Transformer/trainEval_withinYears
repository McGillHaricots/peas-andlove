exec(open("dependencies.py").read())
exec(open("transformerBlocks.py").read())
import concurrent.futures

# Define the function that will process each test testSliceortion

def process_testSlice(idx,testSlices,testSlice, data, batch_size=batch_size):
    suffix = idx
    cv_results = []
    true_pred = []

    target = "pheno.yd18"

    X = data.drop(columns=[col for col in data.columns if "pheno" in col or col in ["Unnamed: 0", "Row.names"]])
    y = data[target]

    fullset = pd.concat([X,y],axis=1)  
    fullset.dropna(subset=[target], inplace=True) # Drop rows with NaN in the target column
    data = fullset.dropna()

    trainingSet = data.iloc[0:int(round(data.shape[0] * 0.6, 0)), :]
    testSet = data.iloc[testSlice, :]
    
    xTrain = trainingSet.drop([target], axis=1)
    yTrain = trainingSet[target]

    xTest = testSet.drop([target], axis=1)
    yTest = testSet[target]

    unique = xTrain.stack().nunique()
    batch_size = batch_size

    #compute feature weights using training data
    feature_weights,pooling_weights= getWeights(xTrain,yTrain,xTest,yTest,batch_size)

    xTrain = pd.DataFrame(xTrain)
    xTest = pd.DataFrame(xTest)
    yTrain = pd.DataFrame(yTrain)
    yTest = pd.DataFrame(yTest)
    
    # Convert to tensors
    xTrain = torch.tensor(xTrain.values, dtype=torch.long)
    yTrain = torch.tensor(yTrain.values, dtype=torch.float32)
    xTest = torch.tensor(xTest.values, dtype=torch.long)
    yTest = torch.tensor(yTest.values, dtype=torch.float32)

    train_loader, test_loader = createTensors(xTrain,xTest, yTrain,yTest)

    # Initialize the model, optimizer, and scheduler
    src_vocab_size = int(unique)
    tgt_vocab_size = 1
    d_model = 200
    num_heads = 5
    num_layers = 5
    d_ff = 100
    max_seq_length = xTrain.shape[1]
    dropout = 0.05
    criterion = lambda estimations, batch_y: focalLoss(beta=0.5, gamma=1, batch_y=batch_y, estimations=estimations)

    transformer = Transformer(src_vocab_size, tgt_vocab_size, d_model, num_heads, num_layers, d_ff, max_seq_length, dropout, feature_weights,pooling_weights)
    optimizer = torch.optim.Adam(transformer.parameters(), lr=0.001)
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=25, gamma=0.1)
    transformer.apply(initialize_attention_weights)

    # Training loop
    loss_values, val_losses, val_accuracies = [], [], []
    
    xTrain, xValid, yTrain, yValid = train_test_split(xTrain, yTrain, test_size=0.33, shuffle=True)
    y_valid_tensor = torch.tensor(yValid.values, dtype=torch.float32)
    x_valid_tensor = torch.tensor(xValid.values, dtype=torch.long)
    valid_dataset = TensorDataset(x_valid_tensor, y_valid_tensor)
    valid_loader = DataLoader(valid_dataset, batch_size=batch_size, shuffle=False, drop_last=True)


    val_accuracy_prev = 0
    for epoch in range(50):
        transformer.train()
        train_loss = 0
        for batch_x, batch_y in valid_loader:
            batch_y = batch_y.squeeze(-1)
            optimizer.zero_grad()
            estimations = transformer(batch_x)
            loss = criterion(estimations, batch_y)
            loss.backward()
            optimizer.step()
            train_loss += loss.item()

        scheduler.step()
        avg_train_loss = train_loss / len(train_loader)
        loss_values.append(avg_train_loss)

        # Validation loop
        transformer.eval()
        val_loss = 0
        predictions = []
        true_vals = []

        with torch.no_grad():
            for batch_x, batch_y in test_loader:
                batch_y = batch_y.squeeze(-1)
                preds = transformer(batch_x)
                loss = criterion(preds, batch_y)
                val_loss += loss.item()

                predictions.extend(preds.numpy())
                true_vals.extend(batch_y.numpy())

        avg_val_loss = val_loss / len(valid_loader)
        val_losses.append(avg_val_loss)
        val_accuracy, _ = pearsonr(predictions, true_vals)
        val_accuracies.append(val_accuracy)

        current_lr = optimizer.param_groups[0]['lr']
        print(f"Epoch {epoch} | Train Loss: {avg_train_loss:.4f} | Val Loss: {avg_val_loss:.4f} | Val Accuracy: {val_accuracy:.4f} | LR: {current_lr:.6f}")

    # Save the results for this testSlice
    torch.save(transformer, f"transformerSY_BLB_{suffix}.pth")
    loss_csv_file = f"SY_optim_loss_BLB_{suffix}.csv"
    with open(loss_csv_file, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Epoch", "Train Loss", "Validation Loss", "Validation Accuracy"])
        for i in range(len(loss_values)):
            writer.writerow([i + 1, loss_values[i], val_losses[i], val_accuracies[i]])

    cv_results, values = evaluateModel(transformer,test_loader)
    values= pd.DataFrame(values)
    values.to_csv(f"pred_true_SY_BLB_{suffix}.csv")
    
    return cv_results

data = pd.read_csv("BLB_fullset.csv")
target = "pheno.yd18"

X = data.drop(columns=[col for col in data.columns if "pheno" in col or col in ["Unnamed: 0", "Row.names"]])
y = data[target]

fullset = pd.concat([X,y],axis=1)  
fullset.dropna(subset=[target], inplace=True) # Drop rows with NaN in the target column
X = fullset.dropna()

# Prepare the list of testSlices
testSlices = [slice(0, int(round(X.shape[0]*0.6,0))),
              slice(0, int(round(X.shape[0]*0.7,0))),
              slice(0, int(round(X.shape[0]*0.8,0))),
              slice(0, int(round(X.shape[0]*0.9,0))),
              slice(0, int(round(X.shape[0]*0.99,0))),
              slice(-int(round(X.shape[0]*0.9,)),None),
              slice(-int(round(X.shape[0]*0.8,)),None),
              slice(-int(round(X.shape[0]*0.7,)),None),
              slice(-int(round(X.shape[0]*0.6,)),None),
              slice(-int(round(X.shape[0]*0.5,)),None),
              slice(-int(round(X.shape[0]*0.4,)),None)]

with concurrent.futures.ProcessPoolExecutor() as executor:
    futures = []
    results_by_index = {}

    for idx, testSlice in enumerate(testSlices):
        future = executor.submit(process_testSlice, idx, testSlices, testSlice, data)
        results_by_index[idx] = future

    final_cv_results = []
    for idx in sorted(results_by_index):
        result = results_by_index[idx].result()
        final_cv_results.extend(result)

# Save the results after all tasks are completed
pd.DataFrame(final_cv_results).to_csv("SY_CV_Accuracies_BLB_testSlices2018.csv")
